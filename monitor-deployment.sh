#!/bin/bash

echo "üîç RENDER DEPLOYMENT MONITORING"
echo "==============================="
echo "Monitoring deployment progress and testing fixes..."
echo ""

BACKEND_URL="https://vidaduacademy.onrender.com"
MAX_ATTEMPTS=10
ATTEMPT=1

while [ $ATTEMPT -le $MAX_ATTEMPTS ]; do
    echo "üîÑ Attempt $ATTEMPT/$MAX_ATTEMPTS - $(date)"
    
    # Test health endpoint
    health_response=$(curl -s -w "HTTP_CODE:%{http_code}" "$BACKEND_URL/api/health" 2>/dev/null)
    HEALTH_STATUS=$(echo "$health_response" | grep "HTTP_CODE:" | cut -d: -f2 | tr -d '"' | cut -d',' -f1)
    
    # Test debug endpoint  
    debug_response=$(curl -s -w "HTTP_CODE:%{http_code}" "$BACKEND_URL/debug-db" 2>/dev/null)
    DEBUG_STATUS=$(echo "$debug_response" | grep "HTTP_CODE:" | cut -d: -f2 | tr -d '"' | cut -d',' -f1)
    
    # Test standalone debug
    standalone_response=$(curl -s -w "HTTP_CODE:%{http_code}" "$BACKEND_URL/debug-standalone" 2>/dev/null)
    STANDALONE_STATUS=$(echo "$standalone_response" | grep "HTTP_CODE:" | cut -d: -f2 | tr -d '"' | cut -d',' -f1)
    
    echo "Health: $HEALTH_STATUS | Debug: $DEBUG_STATUS | Standalone: $STANDALONE_STATUS"
    
    if [ "$DEBUG_STATUS" = "200" ]; then
        echo ""
        echo "‚úÖ DEBUG ENDPOINT WORKING - Checking database connection..."
        
        # Check if PostgreSQL driver error is fixed
        if curl -s "$BACKEND_URL/debug-standalone" | grep -q "could not find driver"; then
            echo "‚ùå PostgreSQL driver still missing"
        else
            echo "‚úÖ PostgreSQL driver issue resolved"
        fi
        
        # Check if .env file is created
        if curl -s "$BACKEND_URL/debug-standalone" | grep -q ".env file does not exist"; then
            echo "‚ùå .env file still missing"
        else
            echo "‚úÖ .env file created successfully"
        fi
        
        # Check database connection
        if curl -s "$BACKEND_URL/debug-standalone" | grep -q "PostgreSQL connection failed"; then
            echo "‚ùå Database connection still failing"
        else
            echo "‚úÖ Database connection working"
        fi
        
        echo ""
        echo "üéØ DEPLOYMENT STATUS:"
        if curl -s "$BACKEND_URL/debug-standalone" | grep -q "‚úÖ.*connection.*success"; then
            echo "‚úÖ DEPLOYMENT SUCCESSFUL!"
            echo "‚úÖ All systems operational"
            echo ""
            echo "üöÄ You can now test login functionality"
            echo "üîó Backend URL: $BACKEND_URL"
            break
        else
            echo "‚ö†Ô∏è  Deployment partially working, some issues remain"
        fi
    else
        echo "‚è≥ Deployment still in progress..."
    fi
    
    if [ $ATTEMPT -eq $MAX_ATTEMPTS ]; then
        echo ""
        echo "üîç FINAL DIAGNOSTIC REPORT:"
        echo "=========================="
        curl -s "$BACKEND_URL/debug-standalone" | head -30
        echo ""
        echo "‚ùå Deployment monitoring timeout"
        echo "üìã Manual investigation required"
        echo "üîó Check Render Dashboard: https://dashboard.render.com/"
        break
    fi
    
    echo "‚è≥ Waiting 30 seconds before next check..."
    echo ""
    sleep 30
    ATTEMPT=$((ATTEMPT + 1))
done

echo ""
echo "üèÅ Monitoring complete - $(date)"
