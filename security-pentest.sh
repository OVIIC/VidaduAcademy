#!/bin/bash

# VidaduAcademy Security Penetration Test Script
# This script tests various security vulnerabilities and protections

echo "üîí Starting VidaduAcademy Security Penetration Tests"
echo "=================================================="

# Configuration
BASE_URL="http://localhost:8000/api"
TEST_EMAIL="pentester@example.com"
TEST_PASSWORD="testpassword123"
MALICIOUS_PAYLOADS=(
    "<script>alert('XSS')</script>"
    "'; DROP TABLE users; --"
    "../../../etc/passwd"
    "javascript:alert(1)"
    "<img src=x onerror=alert(1)>"
    "' OR '1'='1"
    "%3Cscript%3Ealert('XSS')%3C/script%3E"
)

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Test counter
TESTS_PASSED=0
TESTS_FAILED=0
TESTS_TOTAL=0

# Function to run test
run_test() {
    local test_name="$1"
    local expected_status="$2"
    local actual_status="$3"
    local description="$4"
    
    ((TESTS_TOTAL++))
    
    echo -n "Testing: $test_name - "
    
    if [ "$actual_status" = "$expected_status" ]; then
        echo -e "${GREEN}PASS${NC} ($actual_status)"
        ((TESTS_PASSED++))
    else
        echo -e "${RED}FAIL${NC} (Expected: $expected_status, Got: $actual_status)"
        echo "  Description: $description"
        ((TESTS_FAILED++))
    fi
}

# Function to test endpoint with payload
test_endpoint() {
    local method="$1"
    local endpoint="$2"
    local payload="$3"
    local expected_status="$4"
    local test_name="$5"
    
    local response
    local status_code
    
    if [ "$method" = "POST" ]; then
        response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST \
            -H "Content-Type: application/json" \
            -d "$payload" \
            "$BASE_URL$endpoint" 2>/dev/null)
    else
        response=$(curl -s -w "HTTPSTATUS:%{http_code}" \
            "$BASE_URL$endpoint?data=$(echo "$payload" | sed 's/ /%20/g')" 2>/dev/null)
    fi
    
    status_code=$(echo "$response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
    
    run_test "$test_name" "$expected_status" "$status_code" "Testing $endpoint with payload: $payload"
}

echo -e "\n${BLUE}1. Testing XSS Protection${NC}"
echo "-------------------------"

for payload in "${MALICIOUS_PAYLOADS[@]}"; do
    if [[ "$payload" == *"script"* ]] || [[ "$payload" == *"javascript"* ]] || [[ "$payload" == *"img"* ]]; then
        test_endpoint "POST" "/register" "{\"name\":\"$payload\",\"email\":\"test@example.com\",\"password\":\"test123\",\"password_confirmation\":\"test123\"}" "403" "XSS in registration"
        test_endpoint "POST" "/login" "{\"email\":\"$payload\",\"password\":\"test123\"}" "403" "XSS in login"
    fi
done

echo -e "\n${BLUE}2. Testing SQL Injection Protection${NC}"
echo "-----------------------------------"

SQL_PAYLOADS=(
    "'; DROP TABLE users; --"
    "' OR '1'='1"
    "' UNION SELECT * FROM users --"
    "admin'--"
    "' OR 1=1 #"
)

for payload in "${SQL_PAYLOADS[@]}"; do
    test_endpoint "POST" "/login" "{\"email\":\"$payload\",\"password\":\"test123\"}" "403" "SQL Injection in login"
done

echo -e "\n${BLUE}3. Testing Path Traversal Protection${NC}"
echo "------------------------------------"

PATH_PAYLOADS=(
    "../../../etc/passwd"
    "..\\windows\\system32\\drivers\\etc\\hosts"
    "....//....//....//etc/passwd"
    "%2e%2e%2f%2e%2e%2f%2e%2e%2fetc%2fpasswd"
)

for payload in "${PATH_PAYLOADS[@]}"; do
    test_endpoint "POST" "/register" "{\"name\":\"$payload\",\"email\":\"test@example.com\",\"password\":\"test123\",\"password_confirmation\":\"test123\"}" "403" "Path Traversal in registration"
done

echo -e "\n${BLUE}4. Testing Rate Limiting${NC}"
echo "------------------------"

echo "Testing login rate limiting (5 attempts per minute)..."
for i in {1..7}; do
    response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST \
        -H "Content-Type: application/json" \
        -d "{\"email\":\"nonexistent@example.com\",\"password\":\"wrongpassword\"}" \
        "$BASE_URL/login" 2>/dev/null)
    
    status_code=$(echo "$response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
    
    if [ $i -le 5 ]; then
        run_test "Login attempt $i" "401" "$status_code" "Should be unauthorized for non-existent user"
    else
        run_test "Login attempt $i (rate limited)" "429" "$status_code" "Should be rate limited after 5 attempts"
    fi
done

echo -e "\n${BLUE}5. Testing Security Headers${NC}"
echo "----------------------------"

echo "Checking security headers..."
headers_response=$(curl -s -I "$BASE_URL/../" 2>/dev/null)

check_header() {
    local header_name="$1"
    local expected_value="$2"
    
    if echo "$headers_response" | grep -qi "$header_name"; then
        echo -e "${GREEN}‚úì${NC} $header_name header present"
        ((TESTS_PASSED++))
    else
        echo -e "${RED}‚úó${NC} $header_name header missing"
        ((TESTS_FAILED++))
    fi
    ((TESTS_TOTAL++))
}

check_header "X-Content-Type-Options" "nosniff"
check_header "X-Frame-Options" "DENY"
check_header "X-XSS-Protection" "1; mode=block"
check_header "Content-Security-Policy" ""
check_header "Referrer-Policy" "strict-origin-when-cross-origin"

echo -e "\n${BLUE}6. Testing File Upload Security${NC}"
echo "-------------------------------"

# Test dangerous file extensions
DANGEROUS_EXTENSIONS=(
    "malware.exe"
    "script.php"
    "backdoor.jsp"
    "trojan.bat"
    "virus.com"
    "shell.asp"
)

echo "Testing dangerous file upload rejection..."
for filename in "${DANGEROUS_EXTENSIONS[@]}"; do
    # This would need actual file upload endpoint testing
    echo "Would test: $filename (skipped - requires actual file upload endpoint)"
done

echo -e "\n${BLUE}7. Testing Authentication Bypass${NC}"
echo "---------------------------------"

# Test accessing protected endpoints without authentication
PROTECTED_ENDPOINTS=(
    "/change-password"
    "/logout"
)

for endpoint in "${PROTECTED_ENDPOINTS[@]}"; do
    response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST \
        -H "Content-Type: application/json" \
        "$BASE_URL$endpoint" 2>/dev/null)
    
    status_code=$(echo "$response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
    run_test "Access $endpoint without auth" "401" "$status_code" "Should require authentication"
done

echo -e "\n${BLUE}8. Testing CSRF Protection${NC}"
echo "---------------------------"

echo "Testing CSRF token validation..."
response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST \
    -H "Content-Type: application/json" \
    -d "{\"email\":\"test@example.com\",\"password\":\"test123\"}" \
    "$BASE_URL/login" 2>/dev/null)

status_code=$(echo "$response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
# Note: API endpoints typically don't use CSRF for JSON requests with proper headers
echo "CSRF testing for API endpoints (typically handled by SPA framework)"

echo -e "\n${BLUE}9. Testing Input Validation${NC}"
echo "----------------------------"

# Test various input validation scenarios
test_endpoint "POST" "/register" "{\"name\":\"\",\"email\":\"invalid-email\",\"password\":\"123\"}" "422" "Invalid input validation"
test_endpoint "POST" "/register" "{\"name\":\"Valid Name\",\"email\":\"valid@example.com\",\"password\":\"validpassword123\",\"password_confirmation\":\"different\"}" "422" "Password confirmation mismatch"

echo -e "\n${BLUE}10. Testing Account Lockout${NC}"
echo "----------------------------"

echo "Testing account lockout after multiple failed attempts..."
# First, create a test user
curl -s -X POST \
    -H "Content-Type: application/json" \
    -d "{\"name\":\"Lockout Test\",\"email\":\"lockout@example.com\",\"password\":\"correctpassword123\",\"password_confirmation\":\"correctpassword123\"}" \
    "$BASE_URL/register" > /dev/null

# Wait a moment for rate limit reset
sleep 2

# Now test lockout
for i in {1..6}; do
    response=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST \
        -H "Content-Type: application/json" \
        -d "{\"email\":\"lockout@example.com\",\"password\":\"wrongpassword\"}" \
        "$BASE_URL/login" 2>/dev/null)
    
    status_code=$(echo "$response" | grep -o "HTTPSTATUS:[0-9]*" | cut -d: -f2)
    
    if [ $i -le 5 ]; then
        echo "Failed attempt $i: $status_code (expected 401 or 429)"
    else
        run_test "Account lockout after 5 failures" "423" "$status_code" "Account should be locked after 5 failed attempts"
    fi
done

# Summary
echo -e "\n${YELLOW}===============================================${NC}"
echo -e "${YELLOW}Security Penetration Test Results${NC}"
echo -e "${YELLOW}===============================================${NC}"
echo -e "Total Tests: $TESTS_TOTAL"
echo -e "${GREEN}Passed: $TESTS_PASSED${NC}"
echo -e "${RED}Failed: $TESTS_FAILED${NC}"

if [ $TESTS_FAILED -eq 0 ]; then
    echo -e "\n${GREEN}üéâ All security tests passed! The application appears to be well-protected.${NC}"
    exit 0
else
    echo -e "\n${RED}‚ö†Ô∏è  Some security tests failed. Please review and fix the issues.${NC}"
    exit 1
fi
